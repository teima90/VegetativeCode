{
  "hash": "0934398a0754433d86af3f37ecbcc29f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"10 Tips to Kickstart Your Bioinformatics Projects in R\"\nauthor: \"Maite Saura\"\nformat:\n  html:\n    toc: true\n    toc-location: left\ndate: \"2025-01-04\"\ncategories: [R, General, Tips]\ndescription: \"First things, first\"\nimage: \"banner.jpg\"\n---\n\n\n\n![Plants and \"Bioinfomatics\" according to ChatGPT](banner.jpg)\n\nOrganize first, program later. Having a predefined structure for your bioinformatic projects can save you significant time and effort when it comes to publishing your results and sharing your code with colleagues. It also makes programming itself more efficient by helping you avoid the chaos of disorganized files scattered across multiple folders, repetitive objects taking up space, or endlessly copy-pasting parts of the same code.\n\nTo help you to avoid these pitfalls (which may or may not be based on my personal experience), I am sharing **10 useful tips to keep in mind before starting your bioinformatics journey in R**.\n\n## One problem, one project\n\nAt this point of my life, everything that I do in R lives within a RStudio Project. **RStudio Projects** act as containers, creating an environment where you have access to all the files, data, and configurations you need for a specific analysis. A project can vary in size, from small tasks to large-scale analyses, but it's important to keep a **logical structure**. I wouldn't create a single project for my entire PhD thesis. Instead, I would break it down into separate projects, each focusing on a set of related analyses. For example, for the purposes of this blog, I will create a separate RStudio project for each analysis, with each analysis corresponding to a different post.\n\nWhen creating separate RStudio Projects, it is important to think about how long you'll be working on a specific analysis. If you add new analyses within the same project that require different package versions, it could break earlier analyses that depend on older versions. By keeping projects focused and limiting their scope, you can maintain consistency in the tools and package versions, which is essential for reproducibility and version control. This brings us to the next tip.\n\n::: {.callout-note appearance=\"simple\"}\nMore info on how to create R Projects: [**Using RStudio Projects**](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects){target=\"_blank\"}\n:::\n\n## Create reproducible environments with `renv`\n\nThe `renv` package is a powerful tool for managing **reproducible environments** in your R projects. It creates a separate library specifically for the packages you use in a project. This allows you to save and lock the **exact versions of packages** used during your analysis, ensuring consistent results whether revisiting the project in the future or sharing it with colleagues. By sharing the `renv` environment along with your code, you can guarantee that others can reproduce your work without version conflicts or missing dependencies.\n\n::: {.callout-note appearance=\"simple\"}\nMore info on `renv`: [**Introduction to renv**](https://rstudio.github.io/renv/articles/renv.html){target=\"_blank\"}\n:::\n\n## Switch to notebooks for collaborative and clearer code\n\nMaking the transition from R scripts (.R) to **R notebooks** (.Rmd) can be a game changer. While scripts are great for your workflow, notebooks are much more effective when it comes to sharing your analysis in scientific publications or with collaborators. They allow you to embed plots, outputs, and explanations directly alongside your code, making your work far more **accessible** and easier to understand.\n\n## Use `file.path()` for referring directories\n\nUse this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath_data <- file.path(\"Folder1\",\"SubFolder1\",\"Data\")\n```\n:::\n\n\n\nInstead of this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath_data <- (\"Folder1/SubFolder1/Data\")\n```\n:::\n\n\n\nBy using `file.path()`, your **code becomes compatible with different operating systems**. As long as your directory structure is the same, the path will work seamlessly, whether you're on Windows, macOS, or Linux.\n\n## Use `set.seed()` at the beginning of your analysis\n\nKeep **randomness under control**. For ensure reproducibility in you analysis, use always a seed value. For example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(101)\n```\n:::\n\n\n\n## Create your theme for `ggplot2`\n\nWhenever possible, I use `ggplot2` for creating plots. To maintain a consistent style across all your figures---such as in a publication---while avoiding repetitive code, save your **theme settings in a variable**:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ntheme_blog <- theme_bw() +\n  theme(\n    text = element_text(size = 8, family = \"sans\"),\n    axis.text = element_text(size = 8, family = \"sans\"),\n    element_line(linewidth = 0.1),\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.1),\n    strip.background = element_rect(colour = \"black\", linewidth = 0.1)\n  )\n```\n:::\n\n\n\n::: {.callout-tip appearance=\"simple\"}\nWhen you use `geom_text` in your plots, the font size will be not match the output. To get the size that you want (e.g. 8) you should multiply the value by `5/14`\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmean_values <- iris %>%\n  group_by(Species) %>%\n  summarise(mean_sepal_length = mean(Sepal.Length))\n\nggplot(data = iris, aes(x = Species, y = Sepal.Length)) +\n  geom_boxplot() +\n  geom_point() +\n  geom_text(\n    data = mean_values, aes(\n      x = Species, y = mean_sepal_length + 1.5,\n      label = round(mean_sepal_length, 2)\n    ),\n    vjust = -1, color = \"red\", size = 8 * 5 / 14\n  ) +\n  ylim(c(3, 9)) +\n  ggtitle(\"Ugliest plot ever\") +\n  theme_blog\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=288}\n:::\n:::\n\n\n\n## Convert your code into functions\n\nAs Hadley Wickham notes in [*R for Data Science*](https://r4ds.hadley.nz/functions.html){target=\"_blank\"}:\n\n::: {.callout-note appearance=\"minimal\"}\n\"A good rule of thumb is to consider writing a **function whenever you've copied and pasted a block of code more than twice**\"\n:::\n\nDuring my postdoc, I frequently analyzed single-cell RNA sequencing datasets using Seurat. Often, I found myself repeating the default pipeline for data normalization and dimensionality reduction. This pipeline involves a series of steps, and instead of copying and pasting the same code repeatedly, I realized I could encapsulate the process into a reusable function. Here's an example inspired by the tutorial [*Using sctransform in Seurat*](https://satijalab.org/seurat/articles/sctransform_vignette.html){target=\"_blank\"}.\n\nTransform this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(Seurat)\n\n# Perform sctransform\npbmc <- CreateSeuratObject(counts = pbmc_data)\npbmc <- SCTransform(pbmc)\npbmc <- RunPCA(pbmc)\npbmc <- RunUMAP(pbmc)\npbmc <- FindNeighbors(pbmc)\npbmc <- FindClusters(pbmc)\n```\n:::\n\n\n\nInto this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(Seurat)\nlibrary(dplyr)\n\nDefaultSeuratPipeline <- function(count_matrix, ...) {\n  # Check if the input is valid\n  if (!is.matrix(count_matrix) && !is(count_matrix, \"dgCMatrix\")) {\n    stop(\"count_matrix must be a matrix or a sparseMatrix\")\n  }\n\n  # Run basic analysis\n  object_seurat <- CreateSeuratObject(count_matrix) %>%\n    SCTransform() %>%\n    RunPCA() %>%\n    RunUMAP() %>%\n    FindNeighbors() %>%\n    FindClusters()\n\n  return(object_seurat)\n}\n\npbmc <- DefaultSeuratPipeline(count_matrix = pbmc_data)\n\n## This is just a very simplified example to show how to transform a series of\n## steps into a function.\n```\n:::\n\n\n\n## Centralize reusable code with a configuration file\n\nImagine you are starting a new RStudio Project for the analysis related to a scientific publication. Within this project, you may create separate notebooks for each analysis related to different figures. Despite this modular setup, you will often **reuse common elements** like datasets, functions, themes, color schemes, or package imports. Instead of duplicating code across notebooks, create a centralized **configuration file** (e.g., `my_config.R`) to store these shared elements.\n\nHere's an example of what your configuration file (`my_config.R`) might look like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed\nset.seed(101)\n\n##################################################\n######## Load packages ###########################\n##################################################\n\nlibrary(Seurat)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n################################################\n########## Directories #########################\n################################################\n\nseurat_objects_path <- file.path(\"Data\", \"Seurat\")\nroot_ath_object <- \"root_ath.rds\"\n\n################################################\n########## Functions   #########################\n################################################\n\n# Function to run default pipeline in Seurat\n\nDefaultSeuratPipeline <- function(count_matrix, ...) {\n  # Check if the input is valid\n  if (!is.matrix(count_matrix) && !is(count_matrix, \"dgCMatrix\")) {\n    stop(\"count_matrix must be a matrix or a sparseMatrix\")\n  }\n\n  # Run basic analysis\n  object_seurat <- CreateSeuratObject(count_matrix) %>%\n    SCTransform() %>%\n    RunPCA() %>%\n    RunUMAP() %>%\n    FindNeighbors() %>%\n    FindClusters()\n\n  return(object_seurat)\n}\n\n################################################\n########## ggplot2 themes   ####################\n################################################\n\ntheme_blog <- theme_bw() +\n  theme(\n    text = element_text(size = 8, family = \"sans\"),\n    axis.text = element_text(size = 8, family = \"sans\"),\n    element_line(linewidth = 0.1),\n    panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.1),\n    strip.background = element_rect(colour = \"black\", linewidth = 0.1)\n  )\n```\n:::\n\n\n\nBy creating this configuration file, you can simply call it in any of your notebooks with:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Notebook and configuration file in the same directory\nsource(\"my_config.R\")\n```\n:::\n\n\n\nThis approach avoids the need for repetitive copy-pasting of code. Additionally, if you need to update a directory path, theme setting, or function, **you only need to make the change in `my_config.R`**, rather than updating it across multiple notebooks.\n\n## Export your plots in a vectorized format\n\nSave your plots in a **vectorized format** like PDF using `ggsave()` for high resolution. While this makes it easy to edit in Illustrator or Inkscape, I try to customize as much as possible in R to improve reproducibility.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(plot1,\n  file = file.path(\"Figures\", \"Figure1A.pdf\"), width = 5.5,\n  height = 9.5, units = \"cm\", dpi = 1000\n)\n```\n:::\n\n\n\n## Commit with Git, share with GitHub\n\nUsing **Git** and **GitHub** helps you track changes, collaborate and **share your work**. I believe it should be mandatory to share the full process behind generating figures in publications---starting from raw data all the way to the code for the final figures. And specially for these publications that are purely bioinformatic analysis! Luckily, many labs are now adopting this practice, and it's common to find GitHub repositories linked to publications.\n\n::: {.callout-note appearance=\"simple\"}\nAn extensive guide on how to use Git and GitHub with R: [**Happy Git and GitHub for the useR**](https://happygitwithr.com/){target=\"_blank\"}\n:::\n\n###### **Acknowledgements**\n\nThank you to everyone reading my first post! This post was written with the help of [ChatGPT](https://chatgpt.com/){target=\"_blank\"}.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}